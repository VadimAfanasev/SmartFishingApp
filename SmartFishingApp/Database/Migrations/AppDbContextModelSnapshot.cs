// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartFishingApp.Models.Rod.Rod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Class")
                        .HasColumnType("text");

                    b.Property<string>("Length")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<Guid?>("TypeOfFishingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeOfFishingId");

                    b.ToTable("Rod");
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("TypeOfFishingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TypeOfFishingId");

                    b.ToTable("TackleBase");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("TypeOfFishingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeOfFishingId");

                    b.ToTable("TackleCategory");
                });

            modelBuilder.Entity("SmartFishingApp.Models.TypeOfFishing.TypeOfFishing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeOfFishing");
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Feeder.FeederAlive", b =>
                {
                    b.HasBaseType("SmartFishingApp.Models.Tackle.TackleBase");

                    b.Property<string>("Lure")
                        .HasColumnType("text");

                    b.Property<string>("NozzleType")
                        .HasColumnType("text");

                    b.ToTable("FeederAlives", (string)null);
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Feeder.FeederBoil", b =>
                {
                    b.HasBaseType("SmartFishingApp.Models.Tackle.TackleBase");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Lure")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<double?>("Size")
                        .HasColumnType("double precision");

                    b.ToTable("FeederBoils", (string)null);
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Feeder.FeederCorn", b =>
                {
                    b.HasBaseType("SmartFishingApp.Models.Tackle.TackleBase");

                    b.Property<string>("Lure")
                        .HasColumnType("text");

                    b.Property<string>("NozzleType")
                        .HasColumnType("text");

                    b.ToTable("FeederCorns", (string)null);
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Float.Alive", b =>
                {
                    b.HasBaseType("SmartFishingApp.Models.Tackle.TackleBase");

                    b.Property<string>("NozzleType")
                        .HasColumnType("text");

                    b.ToTable("Alives", (string)null);
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Float.Corn", b =>
                {
                    b.HasBaseType("SmartFishingApp.Models.Tackle.TackleBase");

                    b.Property<string>("NozzleType")
                        .HasColumnType("text");

                    b.ToTable("Corns", (string)null);
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Spinning.Jig", b =>
                {
                    b.HasBaseType("SmartFishingApp.Models.Tackle.TackleBase");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Form")
                        .HasColumnType("text");

                    b.Property<double?>("Length")
                        .HasColumnType("double precision");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.ToTable("Jigs", (string)null);
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Spinning.Spoon", b =>
                {
                    b.HasBaseType("SmartFishingApp.Models.Tackle.TackleBase");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Form")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<double?>("SizeNumber")
                        .HasColumnType("double precision");

                    b.ToTable("Spoons", (string)null);
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Spinning.Vobler", b =>
                {
                    b.HasBaseType("SmartFishingApp.Models.Tackle.TackleBase");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<double?>("Depenning")
                        .HasColumnType("double precision");

                    b.Property<string>("Flotation")
                        .HasColumnType("text");

                    b.Property<double?>("Length")
                        .HasColumnType("double precision");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.ToTable("Voblers", (string)null);
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Winter.Rocker", b =>
                {
                    b.HasBaseType("SmartFishingApp.Models.Tackle.TackleBase");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<double?>("Length")
                        .HasColumnType("double precision");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.ToTable("Rockers", (string)null);
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Winter.WinterJig", b =>
                {
                    b.HasBaseType("SmartFishingApp.Models.Tackle.TackleBase");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<double?>("Form")
                        .HasColumnType("double precision");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.ToTable("WinterJigs", (string)null);
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Winter.WinterSpoon", b =>
                {
                    b.HasBaseType("SmartFishingApp.Models.Tackle.TackleBase");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<double?>("Length")
                        .HasColumnType("double precision");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.ToTable("WinterSpoons", (string)null);
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Winter.WinterVobler", b =>
                {
                    b.HasBaseType("SmartFishingApp.Models.Tackle.TackleBase");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<double?>("Length")
                        .HasColumnType("double precision");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.ToTable("WinterVobler", (string)null);
                });

            modelBuilder.Entity("SmartFishingApp.Models.Rod.Rod", b =>
                {
                    b.HasOne("SmartFishingApp.Models.TypeOfFishing.TypeOfFishing", "TypeOfFishing")
                        .WithMany("Rods")
                        .HasForeignKey("TypeOfFishingId");

                    b.Navigation("TypeOfFishing");
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleBase", b =>
                {
                    b.HasOne("SmartFishingApp.Models.Tackle.TackleCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("SmartFishingApp.Models.TypeOfFishing.TypeOfFishing", "TypeOfFishing")
                        .WithMany("Tackles")
                        .HasForeignKey("TypeOfFishingId");

                    b.Navigation("Category");

                    b.Navigation("TypeOfFishing");
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleCategory", b =>
                {
                    b.HasOne("SmartFishingApp.Models.TypeOfFishing.TypeOfFishing", "TypeOfFishing")
                        .WithMany()
                        .HasForeignKey("TypeOfFishingId");

                    b.Navigation("TypeOfFishing");
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Feeder.FeederAlive", b =>
                {
                    b.HasOne("SmartFishingApp.Models.Tackle.TackleBase", null)
                        .WithOne()
                        .HasForeignKey("SmartFishingApp.Models.Tackle.TackleTypes.Feeder.FeederAlive", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Feeder.FeederBoil", b =>
                {
                    b.HasOne("SmartFishingApp.Models.Tackle.TackleBase", null)
                        .WithOne()
                        .HasForeignKey("SmartFishingApp.Models.Tackle.TackleTypes.Feeder.FeederBoil", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Feeder.FeederCorn", b =>
                {
                    b.HasOne("SmartFishingApp.Models.Tackle.TackleBase", null)
                        .WithOne()
                        .HasForeignKey("SmartFishingApp.Models.Tackle.TackleTypes.Feeder.FeederCorn", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Float.Alive", b =>
                {
                    b.HasOne("SmartFishingApp.Models.Tackle.TackleBase", null)
                        .WithOne()
                        .HasForeignKey("SmartFishingApp.Models.Tackle.TackleTypes.Float.Alive", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Float.Corn", b =>
                {
                    b.HasOne("SmartFishingApp.Models.Tackle.TackleBase", null)
                        .WithOne()
                        .HasForeignKey("SmartFishingApp.Models.Tackle.TackleTypes.Float.Corn", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Spinning.Jig", b =>
                {
                    b.HasOne("SmartFishingApp.Models.Tackle.TackleBase", null)
                        .WithOne()
                        .HasForeignKey("SmartFishingApp.Models.Tackle.TackleTypes.Spinning.Jig", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Spinning.Spoon", b =>
                {
                    b.HasOne("SmartFishingApp.Models.Tackle.TackleBase", null)
                        .WithOne()
                        .HasForeignKey("SmartFishingApp.Models.Tackle.TackleTypes.Spinning.Spoon", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Spinning.Vobler", b =>
                {
                    b.HasOne("SmartFishingApp.Models.Tackle.TackleBase", null)
                        .WithOne()
                        .HasForeignKey("SmartFishingApp.Models.Tackle.TackleTypes.Spinning.Vobler", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Winter.Rocker", b =>
                {
                    b.HasOne("SmartFishingApp.Models.Tackle.TackleBase", null)
                        .WithOne()
                        .HasForeignKey("SmartFishingApp.Models.Tackle.TackleTypes.Winter.Rocker", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Winter.WinterJig", b =>
                {
                    b.HasOne("SmartFishingApp.Models.Tackle.TackleBase", null)
                        .WithOne()
                        .HasForeignKey("SmartFishingApp.Models.Tackle.TackleTypes.Winter.WinterJig", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Winter.WinterSpoon", b =>
                {
                    b.HasOne("SmartFishingApp.Models.Tackle.TackleBase", null)
                        .WithOne()
                        .HasForeignKey("SmartFishingApp.Models.Tackle.TackleTypes.Winter.WinterSpoon", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFishingApp.Models.Tackle.TackleTypes.Winter.WinterVobler", b =>
                {
                    b.HasOne("SmartFishingApp.Models.Tackle.TackleBase", null)
                        .WithOne()
                        .HasForeignKey("SmartFishingApp.Models.Tackle.TackleTypes.Winter.WinterVobler", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFishingApp.Models.TypeOfFishing.TypeOfFishing", b =>
                {
                    b.Navigation("Rods");

                    b.Navigation("Tackles");
                });
#pragma warning restore 612, 618
        }
    }
}
